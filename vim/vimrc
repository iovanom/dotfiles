call plug#begin('~/.vim/plugged')

""""""""""""""""""""
"" Plugins
""""""""""""""""""""

Plug 'scrooloose/nerdtree', {'on': 'NERDTreeToggle'} 

" Themes
Plug 'sickill/vim-monokai'
Plug 'flazz/vim-colorschemes'

" Airline
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes/'

Plug 'vim-syntastic/syntastic'

Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'

Plug 'tpope/vim-surround'

Plug 'mileszs/ack.vim'

" Plug 'coala/coala-vim'

" Plug 'Shougo/neocomplete.vim'
"
"

" NerdCommenter
Plug 'scrooloose/nerdcommenter'

" editorconfig
Plug 'editorconfig/editorconfig-vim'

" Emmet
Plug 'mattn/emmet-vim', {'for': ['html', 'css']}

" Jinja2
Plug 'glench/vim-jinja2-syntax'

" Git
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'

" Python
"Plug 'klen/python-mode', { 'for': 'python', 'do': 'git submodule update --init --recursive' }
Plug 'mitsuhiko/vim-python-combined', { 'for': 'python' }
Plug 'integralist/vim-mypy', { 'for': 'python' }
" Plug 'coala/coala-vim', { 'for': 'python' }

" JavaScript
Plug 'pangloss/vim-javascript', {'for': 'javascript'}
Plug 'ternjs/tern_for_vim', {'for': 'javascript', 'do': 'npm install'}
Plug 'jelera/vim-javascript-syntax', {'for': 'javascript'}

" CoffeeScript
Plug 'kchmck/vim-coffee-script', { 'for': 'coffee' }

" TypeScript
Plug 'leafgarland/typescript-vim', { 'for': 'typescript' }
Plug 'clausreinke/typescript-tools.vim', { 'do': 'npm install', 'for': 'typescript' }
Plug 'Quramy/tsuquyomi', { 'for': 'typescript' }

" Vue.js
Plug 'posva/vim-vue', { 'for': 'vue' }

Plug 'Shougo/vimproc.vim', {'do' : 'make'}

"Go lang
Plug 'fatih/vim-go', { 'for': 'go' }
Plug 'nsf/gocode',  { 'for': 'go' }

"Rust lang
Plug 'rust-lang/rust.vim', { 'for': 'rust' }

"bitbake
Plug 'kergoth/vim-bitbake'

" Markdown
Plug 'plasticboy/vim-markdown', { 'for': 'markdown' }

" TOML
Plug 'cespare/vim-toml', { 'for': 'toml' }

" Eclim
"Plug 'dansomething/vim-eclim', { 'for': ['python', 'java'] }

" PHP
Plug 'Shougo/vimproc.vim', { 'do' : 'make' }
Plug 'm2mdas/phpcomplete-extended', { 'for': 'php' }

" emmet
Plug 'mattn/emmet-vim', { 'for': ['css', 'html', 'js', 'vue']}



call plug#end()


"""""""""""""""""""""
"" Common Settings 
"""""""""""""""""""""

filetype plugin indent on

"" Set auto read when a file is changed
set autoread

"" Line Number
set number
set relativenumber

"" Cursor
set cursorline

set history=500



"""""""""""""""""""""
"" Key Maps
"""""""""""""""""""""

"" Leader Key
let mapleader = ","
let g:mapleader = ","

"" Bufers keys
noremap <Leader>n :bnext<CR>
noremap <Leader>p :bprevious<CR>
noremap <Leader>x :bd<CR>

noremap ]p :cp <cr>
noremap ]n :cn <cr>

"" Splits navigation
nmap <silent> <C-k> :wincmd k<CR>
nmap <silent> <C-j> :wincmd j<CR>
nmap <silent> <C-h> :wincmd h<CR>
nmap <silent> <C-l> :wincmd l<CR>

"" Search selected text
vnoremap // y/<C-R>"<CR>

""""""""""""""""""""""
"" Vim UI
""""""""""""""""""""""

set hidden

" Set 7 lines to the cursor
set so=7

" Always show current position
set ruler

" Ignore case when searching
"set ignorecase
"set smartcase
set hlsearch

" Don't redraw while executing macros (goot performance config)
set lazyredraw

set encoding=utf8

" Use Unix as the standart file type
set ffs=unix,dos,mac

" Cursor types
if has("autocmd")
  au VimEnter,InsertLeave * silent execute '!echo -ne "\e[2 q"' | redraw!
  au InsertEnter,InsertChange *
    \ if v:insertmode == 'i' | 
    \   silent execute '!echo -ne "\e[6 q"' | redraw! |
    \ elseif v:insertmode == 'r' |
    \   silent execute '!echo -ne "\e[4 q"' | redraw! |
    \ endif
  au VimLeave * silent execute '!echo -ne "\e[ q"' | redraw!
endif

"""""""""""""""""""""""
"" Color and Fonts
"""""""""""""""""""""""

syntax on

" Enable 256 colors palette
set t_Co=256
colorscheme monokain
set background=dark

"let &colorcolumn=81
"highlight ColorColumn ctermbg=234

set colorcolumn=80,120
highlight ColorColumn ctermbg=234

"""""""""""""""""""""""""
"" Files, backup and undo
"""""""""""""""""""""""""
" Turn backup off, since most stuff is in git
set nobackup
set nowb
set noswapfile

" Undo files
set undofile
set undodir=/home/ivan/.vimundo/


"""""""""""""""""""""""""
" Text, tab and inden
"""""""""""""""""""""""""

" Use spaces instead of tabs
set expandtab
set shiftwidth=4
set tabstop=4
set smarttab

autocmd FileType javascript setlocal shiftwidth=2 tabstop=2 softtabstop=0 expandtab
autocmd FileType typescript setlocal shiftwidth=2 tabstop=2 softtabstop=0 expandtab

"""""""""""""""""""""""""
" Plugins Settings
"""""""""""""""""""""""""

" NERDTree
let NERDTreeIgnore=['\.pyc$']
nmap <c-e> :NERDTreeToggle <cr>

" Airline
let g:airline#extensions#tabline#enabled=1
let g:airline_powerline_fonts=1
let g:airline_theme='cool'

" Syntastic
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_error_symbol = "✗"
let g:syntastic_warning_symbol = "⚠"
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_python_checkers = ['python', 'pylint', 'flake8']
let g:syntastic_go_checkers = ['go', 'golint', 'errcheck']
let g:syntastic_javascript_checkers = ['eslint']
let g:syntastic_javascript_eslint_exe = 'npm run lint --'
let g:syntastic_json_checkers = ['jsonlint']
let g:syntastic_mode_map = { 'mode': 'passive', 'active_filetypes': ['go'], 'passive_filetypes': ['javascript', 'python'] }
let g:syntastic_always_populate_loc_list = 0
let g:syntastic_auto_loc_list = 0 

" FZF
nmap <Leader>t :FZF <cr>
nmap \ :Buffers <cr>

" Ack
if executable('ag')
  let g:ackprg = 'ag --vimgrep'
endif

" Competion
" let g:neocomplete#enable_at_startup = 1
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
set completeopt=longest,menuone

" Pymode
let g:pymode_folding = 0
"" pymode_lint options
let g:pymode_lint = 1
let g:pymode_lint_checkers = ['pylint', 'pep8']
let g:pymode_lint_sings = 1
let g:pymode_lint_message = 1
"let g:pymode_lint_on_fly = 1
let g:pymode_lint_cwindow = 0
"" disable the rope cache
let g:pymode_rope = 1 
let g:pymode_rope_lookup_project = 0 
let g:pymode_rope_complete_on_dot = 0 
let g:pymode_options_max_line_length = 120
let g:pymode_rope_completion = 1

" Eclim
let g:EclimPythonValidate = 0

" Go
let g:go_fmt_command = "goimports"
let g:go_metalinter_autosave = 0
let g:go_fmt_fail_silently = 1
setlocal omnifunc=go#complete#Complete

" PHP
autocmd  FileType  php setlocal omnifunc=phpcomplete_extended#CompletePHP
let g:phpcomplete_index_composer_command = "composer"

" Rust
let g:rustfmt_autosave = 1
""""""""""""""""""""""""""""
" Abreviations
" """"""""""""""""""""""""""
iab pdb import pdb;pdb.set_trace()<Esc>
iab eslintdis //eslint-disable-next-line<Esc>

"" Copy/Paste to clipboard
vnoremap <C-c> :w !xclip -i -sel c<CR><CR>
noremap <C-v> :r !xclip -o -sel -c<CR><CR>
